PARSER_BEGIN(Parser)
package io.github.parzival3.scaloxcc.javacc;

import io.github.parzival3.scaloxcc.ast.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;



public class Parser {

    public static void main(String[] args) {
        try {
            List<Stmt> hello = new Parser(new java.io.StringReader(args[0])).compilationUnit();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Parser)

SKIP:  {" " | "\t" | "\n" | "\r" }
SKIP:  {<"//" (~["\r", "\n"])*>}

TOKEN: {
       <LEFT_PAREN: "(">  |
       <RIGHT_PAREN: ")"> |
       <LEFT_BRACE: "{">  |
       <RIGHT_BRACE: "}">  |
       <COMMA: ",">  |
       <DOT: ".">  |
       <MINUS: "-">  |
       <PLUS: "+">  |
       <SEMICOLON: ";">  |
       <SLASH: "/">  |
       <STAR: "*">        |
       <BANG: "!">        |
       <BANG_EQUAL: "!=">        |
       <EQUAL: "=">        |
       <EQUAL_EQUAL: "==">        |
       <GREATER: ">">        |
       <GREATER_EQUAL: ">=">        |
       <LESS: "<">        |
       <LESS_EQUAL: "<=">        |
       <STRING: "\"" (<ESC> | ~["\"","\\","\n","\r"])* "\"" > |
       < #ESC: "\\" ["n","t","b","r","f","\\","'","\""] > |
       <AND: "and">        |
       <CLASS: "class">        |
       <FALSE: "false">        |
       <FOR: "for">        |
       <FUN: "fun">        |
       <IF: "if">        |
       <ELSE: "else">        |
       <NIL: "nil">        |
       <OR: "or">        |
       <PRINT: "print">        |
       <RETURN: "return">        |
       <SUPER: "super">        |
       <THIS: "this">        |
       <TRUE: "true">        |
       <VAR: "var">        |
       <WHILE: "while">        |
       <IDENTIFIER: (["a"-"z","A"-"Z","_"]) (["a"-"z","A"-"Z","_","0"-"9"])* >        |
       <NUMBER: (["0"-"9"])+ (".")? (["0"-"9"])* >
}


List<Stmt> compilationUnit() : { List<Stmt> statements = new ArrayList<>(); Stmt s; }
{
    ( s = declaration() { statements.add(s); })*
    <EOF>
    { return statements; }
}

Stmt declaration() : { Stmt s = null; } {
    s = classDeclaration()
    | s = methodDeclaration()
    | s = variableDeclarator()
    | <SEMICOLON>
    { return s; }
}

Stmt classDeclaration() : { Stmt s = null; Token i = null; Token d = null; List<Stmt> b = new ArrayList<>(); } {
    <CLASS> i = <IDENTIFIER> [ <LESS> d = <IDENTIFIER> ] b = classBody()
    {
        TokenInstance identifier = new TokenInstance(TokenType.IDENTIFIER, i.image, scala.Option.apply(null));
        TokenInstance derived = new TokenInstance(TokenType.IDENTIFIER, d.image, scala.Option.apply(null));
        Variable superClass = new Variable(derived);
        return new LoxClass(identifier, superClass, b);
    }
}

List<Stmt> classBody() : { Stmt s; List<Stmt> b = new ArrayList<Stmt>(); } {
    <LEFT_BRACE> ( s = classBodyDeclaration() { b.add(s); } )* <RIGHT_BRACE>
    { return b; }
}

Stmt classBodyDeclaration() : { Stmt m; } {
    m = methodDeclaration()
    { return m; }
}

Stmt methodDeclaration() : { Token name; List<TokenInstance> params = new ArrayList<TokenInstance>(); List<Stmt> b = new ArrayList<Stmt>(); } {
    <LEFT_BRACE> name = <IDENTIFIER> params = methodDeclarator() ( b = block() | <SEMICOLON> )
    {
        TokenInstance fName = new TokenInstance(TokenType.IDENTIFIER, name.image, scala.Option.apply(null));
        return new Function(fName, params, b);
    }
}

List<TokenInstance> methodDeclarator() : { List<TokenInstance> params = new ArrayList<TokenInstance>(); } {
    params = formalParameters()
    { return params; }
}

List<TokenInstance> formalParameters() : { TokenInstance param;  List<TokenInstance> params = new ArrayList<TokenInstance>(); } {
    <LEFT_PAREN> [ param = formalParameter() { params.add(param); } ( <COMMA> param = formalParameter() { params.add(param); } )* ] <RIGHT_PAREN>
    { return params; }
}

TokenInstance formalParameter() : { Token param; } {
    param = <IDENTIFIER>
    { return new TokenInstance(TokenType.IDENTIFIER, param.image, scala.Option.apply(null)); }
}

List<Stmt> block() : { List<Stmt> statements = new ArrayList<Stmt>(); Stmt s = null; } {
    <LEFT_BRACE> ( s = declaration() { statements.add(s); })* <RIGHT_BRACE>
    { return statements; }
}

Stmt variableDeclarator() : { Token n; Expr init = null; } {
    <VAR> n = <IDENTIFIER> [ <EQUAL> init = expression() ] <SEMICOLON>
    {
        TokenInstance name = new TokenInstance(TokenType.IDENTIFIER, name.image, scala.Option.apply(null));
        return new Var(name, init);
    }
}

Expr expression() : {} {

}

Expr assignment() : { Expr c = null; Token t; Expr a; Expr o; } {
   [ c = call() <DOT> ] t <IDENTIFIER> <EQUAL> a = assignement()
    | o = logicOr():
    {
        if ( c == null && a == null ) {
           return o;
        } else if ( c == null ) {
           TokenInstance i = new TokenInstance(TokenType.IDENTIFIER, t.image, scala.Option.apply(null));
           return new Assignment(i, a);
        } else {
           TokenInstance i = new TokenInstance(TokenType.IDENTIFIER, t.image, scala.Option.apply(null));
           return new Set(c, i, a);
        }
    }
}

Expr logicOr() : { Expr left; Expr right; TokenInstance t = new TokenInstance(TokenType.OR, "or", scala.Option.apply(null)); } {
    left = logicAnd() ( <OR> right = logicAnd() { left = new Logical(left, e, right); } )*
    { return left; }
}

Expr logicAnd() : { Expr left; Expr right; TokenInstance t = new TokenInstance(TokenType.AND, "and", scala.Option.apply(null)); } {
    left = equality() ( <AND> right = equality() { left = new Logical(left, e, right); } )*
    { return left; }
}

Expr equality() : { Expr left; Expr right; Token t } {
    left = comparsion() ( ( t = <BANG_EQUAL> | t = <EQUAL_EQUAL> ) right = comparsion()
                          {
                              TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
                              left = new Binary(left, token, right);
                          }) *
    { return left; }
}

Expr comparsion() : { Expr left; Expr right; Token t; } {
    left = comparsion() ( ( t = <LESS> | t = <LESS_EQUAL> | t = <GREATER> | t = <GREATER_EQUAL> ) right = comparsion()
                          {
                              TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
                              left = new Binary(left, token, right);
                          }) *
    { return left; }
}

Expr term() : { Expr left; Expr right; Token t; } {
   left = factor() ( ( t = <MINUS> | t = <PLUS> ) right = factor() {
           TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
           left = new Binary(left, token, right);
       } )*
   { return left; }
}

Expr factor() : { Expr left; Expr right; Token t; } {
   left = unary() ( ( t = <SLASH> | t = <START> ) right = factor() {
           TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
           left = new Binary(left, token, right);
       } )*
   { return left; }
}

Expr unary() : { Expr e; Expr right; Token t = null; } {
   ( t = <BANG> | t = <MINUS> ) e = unary()
   | e = call()
   {
       if (t == null) {
           return e;
       } else {
           TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
           return new Unary(token, e);
       }
   }
   { return e; }
}

Expr call() : { Expr e; List<TokenInstance> params = new ArrayList<TokenInstance>(); Token t = null; } {
   e = primary() ( <LEFT_PAREN> params = methodDeclarator() <RIGHT_PAREN> | <DOT> t = <IDENTIFIER>
                   {
                       if ( t = null ) {
                          e = new Call(e, params);
                       } else {
                          TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
                          e = new Get(e, token);
                       }
                   })*
  { return e; }
}
