PARSER_BEGIN(SyntaxChecker)
package io.github.parzival3.scaloxcc.javacc;

import io.github.parzival3.scaloxcc.ast.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;


public class SyntaxChecker {
    public static void main(String[] args) {
        try {
            List<Stmt> hello = new SyntaxChecker(new java.io.StringReader(args[0])).compilationUnit();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)

SKIP:  {" " | "\t" | "\n" | "\r" }
SKIP:  {<"//" (~["\r", "\n"])*>}

TOKEN: {
       <LEFT_PAREN: "(">  |
       <RIGHT_PAREN: ")"> |
       <LEFT_BRACE: "{">  |
       <RIGHT_BRACE: "}">  |
       <COMMA: ",">  |
       <DOT: ".">  |
       <MINUS: "-">  |
       <PLUS: "+">  |
       <SEMICOLON: ";">  |
       <SLASH: "/">  |
       <STAR: "*">        |
       <BANG: "!">        |
       <BANG_EQUAL: "!=">        |
       <EQUAL: "=">        |
       <EQUAL_EQUAL: "==">        |
       <GREATER: ">">        |
       <GREATER_EQUAL: ">=">        |
       <LESS: "<">        |
       <LESS_EQUAL: "<=">        |
       <STRING: "\"" (<ESC> | ~["\"","\\","\n","\r"])* "\"" > |
       < #ESC: "\\" ["n","t","b","r","f","\\","'","\""] > |
       <AND: "and">        |
       <CLASS: "class">        |
       <FALSE: "false">        |
       <FOR: "for">        |
       <FUN: "fun">        |
       <IF: "if">        |
       <ELSE: "else">        |
       <NIL: "nil">        |
       <OR: "or">        |
       <PRINT: "print">        |
       <RETURN: "return">        |
       <SUPER: "super">        |
       <THIS: "this">        |
       <TRUE: "true">        |
       <VAR: "var">        |
       <WHILE: "while">        |
       <IDENTIFIER: (["a"-"z","A"-"Z","_"]) (["a"-"z","A"-"Z","_","0"-"9"])* >        |
       <NUMBER: (["0"-"9"])+ (".")? (["0"-"9"])* >
}


List<Stmt> compilationUnit() : { List<Stmt> statements = new ArrayList<>(); Stmt s; }
{
  ( s = typeDeclaration() { statements.add(s); })*
  <EOF>
  { return statements; }
}

Stmt typeDeclaration() { Stmt s = null; } {
   s = classDeclaration()
  | <SEMICOLON>
  { return s; }
}

Stmt classDeclaration() { Stmt s; } {
    <CLASS> <IDENTIFIER> [ <LESS> <IDENTIFIER> ]
}
