options {
//  DEBUG_PARSER =true;
}

PARSER_BEGIN(Parser)
package io.github.parzival3.scaloxcc.javacc;

import io.github.parzival3.scaloxcc.ast.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;



public class Parser {

    public static void main(String[] args) {
        try {
            List<Stmt> hello = new Parser(new java.io.StringReader(args[0])).compilationUnit();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(Parser)

SKIP:  {" " | "\t" | "\n" | "\r" }
SKIP:  {<"//" (~["\r", "\n"])*>}

TOKEN: {
       <LEFT_PAREN: "(">  |
       <RIGHT_PAREN: ")"> |
       <LEFT_BRACE: "{">  |
       <RIGHT_BRACE: "}">  |
       <COMMA: ",">  |
       <DOT: ".">  |
       <MINUS: "-">  |
       <PLUS: "+">  |
       <SEMICOLON: ";">  |
       <SLASH: "/">  |
       <STAR: "*">        |
       <BANG: "!">        |
       <BANG_EQUAL: "!=">        |
       <EQUAL: "=">        |
       <EQUAL_EQUAL: "==">        |
       <GREATER: ">">        |
       <GREATER_EQUAL: ">=">        |
       <LESS: "<">        |
       <LESS_EQUAL: "<=">        |
       <STRING: "\"" (<ESC> | ~["\"","\\","\n","\r"])* "\"" > |
       < #ESC: "\\" ["n","t","b","r","f","\\","'","\""] > |
       <AND: "and">        |
       <CLASS: "class">        |
       <FALSE: "false">        |
       <FOR: "for">        |
       <FUN: "fun">        |
       <IF: "if">        |
       <ELSE: "else">        |
       <NIL: "nil">        |
       <OR: "or">        |
       <PRINT: "print">        |
       <RETURN: "return">        |
       <SUPER: "super">        |
       <THIS: "this">        |
       <TRUE: "true">        |
       <VAR: "var">        |
       <WHILE: "while">        |
       <IDENTIFIER: (["a"-"z","A"-"Z","_"]) (["a"-"z","A"-"Z","_","0"-"9"])* >        |
       <NUMBER: (["0"-"9"])+ (".")? (["0"-"9"])* >
}


List<Stmt> compilationUnit() : { List<Stmt> statements = new ArrayList<>(); Stmt s; }
{
    ( s = declaration() { statements.add(s); })*
    <EOF>
    { return statements; }
}

Stmt declaration() : { Stmt s = null; } {
    //s = classDeclaration() {return s;}
   s = functionDeclaration() { return s; }
   | s = variableDeclarator() { return s; }
   | s = statement() { return s; }
}

Stmt classDeclaration() : { Stmt s = null; Token i = null; Token d = null; List<Stmt> b = new ArrayList<>(); } {
    "class" i = <IDENTIFIER> [ "<" d = <IDENTIFIER> ] b = classBody()
    {
        TokenInstance identifier = new TokenInstance(TokenType.IDENTIFIER, i.image, scala.Option.apply(null));
        TokenInstance derived = new TokenInstance(TokenType.IDENTIFIER, d.image, scala.Option.apply(null));
        Variable superClass = new Variable(derived);
        return new LoxClass(identifier, superClass, b);
    }
}

List<Stmt> classBody() : { Stmt s; List<Stmt> b = new ArrayList<Stmt>(); } {
    "{" ( s = classBodyDeclaration() { b.add(s); } )* "}"
    { return b; }
}

Stmt classBodyDeclaration() : { Stmt m; } {
    m = methodDeclaration()
    { return m; }
}

Stmt functionDeclaration() : {Stmt s;} {
    "fun" s = methodDeclaration() { return s; }
}

Stmt methodDeclaration() : { Token name; List<TokenInstance> params = new ArrayList<TokenInstance>(); List<Stmt> b = new ArrayList<Stmt>(); } {
    name = <IDENTIFIER> params = methodDeclarator() b = block()
    {
        TokenInstance fName = new TokenInstance(TokenType.IDENTIFIER, name.image, scala.Option.apply(null));
        return new Function(fName, params, b);
    }
}

List<TokenInstance> methodDeclarator() : { List<TokenInstance> params = new ArrayList<TokenInstance>(); } {
    params = formalParameters()
    { return params; }
}

List<TokenInstance> formalParameters() : { TokenInstance param;  List<TokenInstance> params = new ArrayList<TokenInstance>(); } {

    "(" [ param = formalParameter() { params.add(param); } ( "," param = formalParameter() { params.add(param); } )* ] ")"
    { return params; }
}

TokenInstance formalParameter() : { Token param; } {
    param = <IDENTIFIER>
    { return new TokenInstance(TokenType.IDENTIFIER, param.image, scala.Option.apply(null)); }
}

List<Stmt> block() : { List<Stmt> statements = new ArrayList<Stmt>(); Stmt s = null; } {
    "{" ( s = declaration() { statements.add(s); })* "}"
    { return statements; }
}

Stmt variableDeclarator() : { Token n; Expr init = null; } {
    <VAR> n = <IDENTIFIER> [ "=" init = expression() ] ";"
    {
        TokenInstance name = new TokenInstance(TokenType.IDENTIFIER, n.image, scala.Option.apply(null));
        return new Var(name, init);
    }
}

Stmt statement() :  { Stmt s; } {
    s = exprStmt() { return s; }
    | s = forStmt() { return s; }
    | s = ifStmt() { return s; }
    | s = printStmt() { return s; }
    | s = returnStmt() { return s; }
    | s = whileStmt() { return s; }
    | s = blockStmt() { return s; }
}

Stmt exprStmt() : { Expr e; } {
    e = expression()  ";" { return new Expression(e); }
}

Stmt forInitializer() : { Stmt i; } {
    // TODO: why the semicollon needs to be here?
    (i = variableDeclarator() { return i; } | i = exprStmt() { return i; } | ";" { return null; })
    { return null; }
}

Stmt forStmt() : { Stmt i = null; Expr ep = null; Expr inc = null; Stmt body = null; } {
    "for" "(" ( i = forInitializer() )  [ ep = expression() ] ";" [ inc = expression() ] ")" body = statement()
    {
        if (inc != null) {
            body = new Block(Arrays.asList(body, i));
        }
        TokenInstance t = new TokenInstance(TokenType.TRUE, "true", scala.Option.apply(true));
        if (ep == null) ep = new Literal(t);
        body = new While(ep, body);
        if (i != null) {
            body = new Block(Arrays.asList(i, body));
        }
        return body;
    }
}

Stmt ifStmt() : { Expr e; Stmt ifB; Stmt elseB = null;} {
    // LOOKAHEAD needed https://www.cs.purdue.edu/homes/hosking/javacc/doc/lookahead.html
    "if" "(" e = expression() ")" ifB = statement() [ LOOKAHEAD(1) "else" elseB = statement() ] { return new If(e, ifB, scala.Option.apply(elseB)); }
}


Stmt printStmt() : { Expr e; } {
    "print" e = expression()  ";" { return new Expression(e); }
}

Stmt returnStmt() : { Expr e = null; } {
    "return" [ e = expression() ]  ";"
    {
        TokenInstance t = new TokenInstance(TokenType.RETURN, "return", scala.Option.apply(null));
        return new Return(t, e);
    }
}

Stmt whileStmt() : { Expr e; Stmt s; } {
   "while" "(" e = expression() ")" s = statement() { return new While(e, s); }
}

Stmt blockStmt() : { List<Stmt> b = new ArrayList<Stmt>(); } {
    b = block() { return new Block(b); }
}

Expr expression() : { Expr e; } {
    e = assignment() { return e; }
}

Expr assignment() : { Expr c = null; Token t = null; Expr a = null; Expr o = null; } {
   //[ c = call() "." ] t = <IDENTIFIER> "=" a = assignment()
   LOOKAHEAD(2)
   t = <IDENTIFIER> "=" a = assignment()
    {
        if ( c == null ) {
           TokenInstance i = new TokenInstance(TokenType.IDENTIFIER, t.image, scala.Option.apply(null));
           return new Assign(i, a);
        } else {
           TokenInstance i = new TokenInstance(TokenType.IDENTIFIER, t.image, scala.Option.apply(null));
           return new Set(c, i, a);
        }
    }
   | o = logicOr() { return o;}
}

Expr logicOr() : { Expr left; Expr right; TokenInstance t = new TokenInstance(TokenType.OR, "or", scala.Option.apply(null)); } {
    left = logicAnd() ( "or" right = logicAnd() { left = new Logical(left, t, right); } )*
    { return left; }
}

Expr logicAnd() : { Expr left; Expr right; TokenInstance t = new TokenInstance(TokenType.AND, "and", scala.Option.apply(null)); } {
    left = equality() ( "and" right = equality() { left = new Logical(left, t, right); } )*
    { return left; }
}

Expr equality() : { Expr left; Expr right; Token t; } {
    left = comparsion() ( ( t = "!=" | t = "==" ) right = comparsion()
                          {
                              TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
                              left = new Binary(left, token, right);
                          }) *
    { return left; }
}

Expr comparsion() : { Expr left; Expr right; Token t; } {
    left = term() ( ( t = "<" | t = "<=" | t = ">" | t = ">=" ) right = term()
                          {
                              TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
                              left = new Binary(left, token, right);
                          }) *
    { return left; }
}

Expr term() : { Expr left; Expr right; Token t; } {
   left = factor() ( ( t = "-" | t = "+" ) right = factor() {
           TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
           left = new Binary(left, token, right);
       } )*
   { return left; }
}

Expr factor() : { Expr left; Expr right; Token t; } {
   left = unary() (  t = factorToken() right = unary() {
           TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
           left = new Binary(left, token, right);
       } )*
   { return left; }
}

Token factorToken() : { Token t; } {
      t = "/" { return t; }
    | t = "*" { return t; }
}

Expr unary() : { Expr e; Expr right; Token t = null; } {
   ( t = "!" | t = "-" ) e = unary()
   {
        TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
        return new Unary(token, e);
   }
   | e = call() { return e; }
}

List<Expr> arguments() : { Expr a; List<Expr> args = new ArrayList<Expr>(); } {

    "(" [ a = expression() { args.add(a); } ( "," a = expression() { args.add(a); } )* ] ")"
    { return args; }
}

Expr callOrGet(Expr e) : { List<Expr> args = new ArrayList<Expr>(); Token t = null;} {
    args = arguments() { return  new Call(e, args); }
    | "." t = <IDENTIFIER> {
                          TokenInstance token = new TokenInstance(TokenInstance.fromLexeme(t.image), t.image, scala.Option.apply(null));
                          return new Get(e, token);
    }
}

Expr call() : { Expr e; } {
   e = primary() ( e = callOrGet(e) )*
  { return e; }
}

Expr primary() : { Expr e = null; Token t = null; } {
    t = "true" { return new Literal(new TokenInstance(TokenType.TRUE, t.image, scala.Option.apply(true))); }
    | t = "false"  { return new Literal(new TokenInstance(TokenType.FALSE, t.image, scala.Option.apply(false))); }
    | t = "nil"  { return new Literal(new TokenInstance(TokenType.NIL, t.image, scala.Option.apply(null))); }
    | t = <NUMBER>  { return new Literal(new TokenInstance(TokenType.NUMBER, t.image, scala.Option.apply(Double.parseDouble(t.image)))); }
    | t = <STRING>  { return new Literal(new TokenInstance(TokenType.NUMBER, t.image, scala.Option.apply(t.image))); }
    | t = <IDENTIFIER>  { return new Variable(new TokenInstance(TokenType.IDENTIFIER, t.image, scala.Option.apply(t.image))); }
    | "(" e = expression() ")" { return e; }
    | <THIS> { return new This(new TokenInstance(TokenType.THIS, t.image, scala.Option.apply(null))); }
    | "super" "." t = <IDENTIFIER> { return new Super(new TokenInstance(TokenType.SUPER, "super", scala.Option.apply(null)), new TokenInstance(TokenType.IDENTIFIER, t.image, scala.Option.apply(null))); }
}
